// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/reactiveops/rbac-manager/pkg/apis/rbacmanager/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RBACDefinitionLister helps list RBACDefinitions.
type RBACDefinitionLister interface {
	// List lists all RBACDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.RBACDefinition, err error)
	// Get retrieves the RBACDefinition from the index for a given name.
	Get(name string) (*v1beta1.RBACDefinition, error)
	RBACDefinitionListerExpansion
}

// rBACDefinitionLister implements the RBACDefinitionLister interface.
type rBACDefinitionLister struct {
	indexer cache.Indexer
}

// NewRBACDefinitionLister returns a new RBACDefinitionLister.
func NewRBACDefinitionLister(indexer cache.Indexer) RBACDefinitionLister {
	return &rBACDefinitionLister{indexer: indexer}
}

// List lists all RBACDefinitions in the indexer.
func (s *rBACDefinitionLister) List(selector labels.Selector) (ret []*v1beta1.RBACDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RBACDefinition))
	})
	return ret, err
}

// Get retrieves the RBACDefinition from the index for a given name.
func (s *rBACDefinitionLister) Get(name string) (*v1beta1.RBACDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("rbacdefinition"), name)
	}
	return obj.(*v1beta1.RBACDefinition), nil
}
